name: Deploy UMM

on:
  push:
    branches: ["master"]

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    outputs:
      instance_ips: ${{ steps.discover.outputs.ips }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        id: docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPO_NAME: umm-app
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Discover EC2 IPs from ASG by tag
        id: discover
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query 'AutoScalingGroups[?Tags[?Key==`Name` && Value==`umm-asg`]].AutoScalingGroupName' \
            --output text)

          if [ -z "$ASG_NAME" ]; then
            echo "ASG not found"
            echo "ips=[]" >> $GITHUB_OUTPUT
            exit 1
          fi

          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --query "AutoScalingGroups[].Instances[?LifecycleState=='InService'].InstanceId" \
            --output text)

          if [ -z "$INSTANCE_IDS" ]; then
            echo "No InService instances."
            echo "ips=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          IPS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_IDS \
            --query "Reservations[*].Instances[*].PrivateIpAddress" \
            --output text | tr '\n' ' ')

          CLEANED=$(echo "$IPS" | xargs)
          JSON=$(echo "$CLEANED" | jq -Rs 'split(" ") | map(select(length > 0))' | jq -c '.')
          echo "ips=$JSON" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2 Instances
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance_ip: ${{ fromJson(needs.build-and-push.outputs.instance_ips) }}

    env:
      IMAGE_URI: ${{ env.IMAGE_URI }}

    steps:
      - name: Debug context
        run: |
          echo "Deploying to ${{ matrix.instance_ip }}"
          echo "Using image: $IMAGE_URI"

      - name: Deploy via Bastion
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ matrix.instance_ip }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.BASTION_PUBLIC_IP }}
          proxy_username: ec2-user
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker stop umm_app || true
            sudo docker rm umm_app || true
            sudo docker pull $IMAGE_URI
            sudo docker run -d \
              --name umm_app \
              -p 80:80 \
              -e SECRET_KEY_BASE=super_secret_dummy_key \
              -e PHX_SERVER=true \
              -e PHX_HOST=0.0.0.0 \
              -e PORT=80 \
              --restart unless-stopped \
              $IMAGE_URI
